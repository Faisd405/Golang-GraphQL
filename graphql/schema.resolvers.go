package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"graphql-template/graphql/model"
	"graphql-template/jwt"
	"graphql-template/models"
	"log"
	"strconv"
)

func init() {
	// log.Println("Init - Users array to be created")
	// users = make([]*model.User, 0)
	// users = append(users, &model.User{
	// 	ID:       "1",
	// 	Name:     "Srinivasa",
	// 	Email:    "Ramanujam@gmail.com",
	// 	Username: "Ramanujam",
	// 	Password: "Ramanujam",
	// })
	// users = append(users, &model.User{
	// 	ID:       "2",
	// 	Name:     "CV",
	// 	Email:    "Raman@gmail.com",
	// 	Username: "Raman",
	// 	Password: "Raman",
	// })
	// users = append(users, &model.User{
	// 	ID:       "3",
	// 	Name:     "Subrahmanyan",
	// 	Email:    "Chandrasekhar@gmail.com",
	// 	Username: "Chandrasekhar",
	// 	Password: "Chandrasekhar",
	// })
	// log.Println("Init - Users array has been created")

	// log.Println("Init - Items array to be created")
	// items = make([]*model.Item, 0)
	// items = append(items, &model.Item{
	// 	ID:          "1",
	// 	Name:        "Item 1",
	// 	Description: "Item 1 Description",
	// 	Price:       100.00,
	// 	Image:       "https://picsum.photos/200/300",
	// 	User:        users[0],
	// })
	// items = append(items, &model.Item{
	// 	ID:          "2",
	// 	Name:        "Item 2",
	// 	Description: "Item 2 Description",
	// 	Price:       200.00,
	// 	Image:       "https://picsum.photos/200/300",
	// 	User:        users[1],
	// })
	// log.Println("Init - Items array has been created")

}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (string, error) {
	var user models.User

	user.Name = input.Name
	user.Email = input.Email
	user.Username = input.Username
	user.Password = input.Password
	user.CreateUser()

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		log.Fatal(err)
	}

	return token, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	// log.Println("Update a USER")

	// for _, user := range users {
	// 	if user.ID == id {
	// 		if input.Name != nil {
	// 			user.Name = *input.Name
	// 		}
	// 		if input.Username != nil {
	// 			user.Username = *input.Username
	// 		}
	// 		if input.Email != nil {
	// 			user.Email = *input.Email
	// 		}
	// 		if input.Password != nil {
	// 			user.Password = *input.Password
	// 		}
	// 		return user, nil
	// 	}
	// }

	// return nil, fmt.Errorf("User not found")
	return nil, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.DeleteUserInput) (*model.User, error) {
	// log.Println("Delete a USER")

	// for index, user := range users {
	// 	if user.ID == input.ID {
	// 		users = append(users[:index], users[index+1:]...)
	// 		return user, nil
	// 	}
	// }

	// return nil, fmt.Errorf("User not found")
	return nil, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	var user models.User
	user.Username = input.Username
	user.Password = input.Password
	if !user.Authenticate() {
		return "", fmt.Errorf("USERNAME OR PASSWORD INCORRECT")
	}

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		log.Fatal(err)
	}
	return token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", fmt.Errorf("INVALID TOKEN")
	}

	token, err := jwt.GenerateToken(username)
	if err != nil {
		log.Fatal(err)
	}

	return token, nil
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.NewItemInput) (*model.Item, error) {
	log.Println("Create a new ITEM")
	item := &models.Item{
		Name:        input.Name,
		Description: input.Description,
		Price:       input.Price,
		Image:       input.Image,
	}

	itemId := item.SaveItem()

	return &model.Item{
		ID:          strconv.FormatInt(itemId, 10),
		Name:        item.Name,
		Description: item.Description,
		Price:       item.Price,
		Image:       item.Image,
	}, nil
}

// UpdateItem is the resolver for the updateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, id string, input model.UpdateItemInput) (*model.Item, error) {
	// log.Println("Update a ITEM")

	// for _, item := range items {
	// 	if item.ID == id {
	// 		if input.Name != nil {
	// 			item.Name = *input.Name
	// 		}
	// 		if input.Description != nil {
	// 			item.Description = *input.Description
	// 		}
	// 		if input.Price != nil {
	// 			item.Price = *input.Price
	// 		}
	// 		return item, nil
	// 	}
	// }

	// return nil, fmt.Errorf("Item not found")
	return nil, nil
}

// DeleteItem is the resolver for the deleteItem field.
func (r *mutationResolver) DeleteItem(ctx context.Context, input model.DeleteItemInput) (*model.Item, error) {
	// log.Println("Delete a ITEM")

	// for index, item := range items {
	// 	if item.ID == input.ID {
	// 		items = append(items[:index], items[index+1:]...)
	// 		return item, nil
	// 	}
	// }

	// return nil, fmt.Errorf("Item not found")
	return nil, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// log.Println("Get all USERS")
	// return users, nil
	return nil, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	// log.Println("Get a USER")

	// for _, user := range users {
	// 	if user.ID == id {
	// 		return user, nil
	// 	}
	// }

	// return nil, fmt.Errorf("User not found")
	return nil, nil
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	resultItems := []*model.Item{}
	dbItems := models.GetAllItems()

	for _, item := range dbItems {
		resultItems = append(resultItems, &model.Item{
			ID:          item.ID,
			Name:        item.Name,
			Description: item.Description,
			Price:       item.Price,
			Image:       item.Image,
		})
	}

	return resultItems, nil
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context, id string) (*model.Item, error) {
	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
